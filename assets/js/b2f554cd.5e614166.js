"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"host-flutter-web-build","metadata":{"permalink":"/blog/host-flutter-web-build","editUrl":"https://github.com/coder-with-a-bushido/portfolio/blog/2020-10-20-flutter-web-build/2020-10-20-flutter-web-build.mdx","source":"@site/blog/2020-10-20-flutter-web-build/2020-10-20-flutter-web-build.mdx","title":"Deploy and maintain your Flutter Web build exclusively in GitHub Pages","description":"Want to host your flutter web build on gh-pages exclusively? Read this.","date":"2020-10-20T00:00:00.000Z","formattedDate":"October 20, 2020","tags":[{"label":"flutter","permalink":"/blog/tags/flutter"},{"label":"flutter-web","permalink":"/blog/tags/flutter-web"},{"label":"gh-pages","permalink":"/blog/tags/gh-pages"}],"readingTime":3.27,"hasTruncateMarker":true,"authors":[{"name":"Karthikeyan S","title":"Software Dev + Writer","url":"https://twitter.com/_KarthikeyanS_","key":"karthikn"}],"frontMatter":{"title":"Deploy and maintain your Flutter Web build exclusively in GitHub Pages","description":"Want to host your flutter web build on gh-pages exclusively? Read this.","slug":"host-flutter-web-build","authors":["karthikn"],"tags":["flutter","flutter-web","gh-pages"],"image":"./host-flutter-web-build-cover.png","hide_table_of_contents":false},"nextItem":{"title":"Adding text selection action in Flutter for android","permalink":"/blog/action-process-text-flutter"}},"content":"Hey, have you ever wanted to host your flutter web build without much work and confusion? I\'ve got a small trick for you in here. You can even use your existing repository to host a new flutter web build. We\'ll get into the working right away.\\n\\nWe will be making a trick or treat web app using flutter and host it\'s release build on GitHub Pages.\\n\\n![Cover](./host-flutter-web-build-cover.png)\\n\\n\x3c!--truncate--\x3e\\n\\n:::note\\n\\nIn this example, we will host only the release build of the flutter web and update it, rather than the whole flutter project itself on GitHub (which is simple). This method is quite helpful, if you want to use an existing repository to have the build files.\\n\\n:::\\n\\n:::tip\\n\\nPlease use [peanut](https://pub.dev/packages/peanut) and not waste your time reading this if you have some love for your life! The method mentioned here is redundant and not efficient now. Thanks.\\n\\n:::\\n\\n## Step 1: Creating a flutter web project.\\n\\nTo create a flutter web project, you have to be in one of the following flutter channels : `beta`, `dev` or `master`. Change your channel and upgrade it, if you were in stable and then proceed to the next step.\\n\\n:::info\\n\\nFlutter web is now available in stable channel. There is no real need to switch.\\n\\n:::\\n\\nEnable support for `flutter-web` in your terminal:\\n\\n`$ flutter config --enable-web`\\n\\nNow, create your flutter project like you usually do and it will have web support. If you want to add web support to an existing project you can use the following command inside the directory:\\n\\n`$ flutter create .`\\n\\n![Basic Directory Structure](./host-flutter-web-build-dir.png)\\n\\nAfter creating your flutter project, you can check if you have the `web` directory. It shows that your project supports `flutter-web`.\\n\\nThe sources for the examples are at the end of this page.\\n\\nNow, you can also publish it on GitHub.\\n\\n## Step 2: Making your flutter-web build.\\n\\nYou can make a release build for the flutter-web using the command:\\n\\n`$ flutter build web --release`\\n\\nNow, you will have a new directory named `build` and you will find your web build in it, like this.\\n\\n![Web Build Directory](./host-flutter-web-build-builddir.png)\\n\\nNow if you look inside that web folder, you will find the build files. As the dart code trans compiles into javascript code with HTML and CSS, the starting point of the build naturally, is the `index.html`.\\n\\n## Step 3: Publishing the build to GitHub.\\n\\nYou can now start a new repository or clone a repository you already have in a new folder/location .\\n\\n![New Repo Directory](./host-flutter-web-build-newrepo.png)\\n\\nThis is how the cloned repository will look like (mine is just empty).\\n\\nThen rename it to web and paste it into `flutter-project/build` directory, before really building the web build.\\n\\n![Compare Directories](./host-flutter-web-build-comparedir.png)\\n\\nNow, that you have done everything, you can edit your flutter code just like you want, anytime from the flutter-project and build it. Then the changes can be committed and pushed from `flutter-project/build/web`. This reduces our worry to handle the build files to host and maintain two different repositories, one for the flutter project and the other exclusively for hosting.\\n\\n## Step 4: Hosting it on GitHub Pages.\\n\\nAfter you have successfully pushed the build files you got from the flutter project, go to the repository page. Then, navigate to the settings, you will find a title **\u201cGitHub Pages\u201d**. Select your source as main branch and save.\\n\\n![GitHub Pages](./host-flutter-web-build-ghpages.png)\\n\\nThat\'s it, you have successfully hosted your flutter web build with GitHub pages. Now, you can go to your site and view your beautifully built flutter web app (unlike mine\ud83d\ude1c), by clicking the link displayed under the same section.\\n\\n:::tip\\n\\nYou can also use a custom domain instead of just `username.github.io`, by specifying a domain in custom domain section, by following the steps [here](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site).\\n\\n:::\\n\\n![Demo](./host-flutter-web-build-demo.gif)\\n\\nYou can check the working example [here](https://coder-with-a-bushido.github.io/trick_or_treat_web/#/) .\\n\\nRepo for the flutter project can be found [here](https://github.com/coder-with-a-bushido/trick_or_treat) and for the respective web build [here](https://github.com/coder-with-a-bushido/trick_or_treat_web).\\n\\n**HAPPY CODING!**"},{"id":"action-process-text-flutter","metadata":{"permalink":"/blog/action-process-text-flutter","editUrl":"https://github.com/coder-with-a-bushido/portfolio/blog/2020-09-23-action-process-text/2020-09-23-action-process-text.mdx","source":"@site/blog/2020-09-23-action-process-text/2020-09-23-action-process-text.mdx","title":"Adding text selection action in Flutter for android","description":"A guide on adding ACTION_PROCESS_TEXT in Flutter","date":"2020-09-23T00:00:00.000Z","formattedDate":"September 23, 2020","tags":[{"label":"action_process_text","permalink":"/blog/tags/action-process-text"},{"label":"flutter","permalink":"/blog/tags/flutter"},{"label":"android","permalink":"/blog/tags/android"}],"readingTime":2.04,"hasTruncateMarker":true,"authors":[{"name":"Karthikeyan S","title":"Software Dev + Writer","url":"https://twitter.com/_KarthikeyanS_","key":"karthikn"}],"frontMatter":{"title":"Adding text selection action in Flutter for android","description":"A guide on adding ACTION_PROCESS_TEXT in Flutter","slug":"action-process-text-flutter","authors":["karthikn"],"tags":["action_process_text","flutter","android"],"image":"./action-process-text-flutter-cover.png","hide_table_of_contents":false},"prevItem":{"title":"Deploy and maintain your Flutter Web build exclusively in GitHub Pages","permalink":"/blog/host-flutter-web-build"}},"content":"Have you ever wanted to give your user a shortcut, for opening the selected text in your flutter app from anywhere in the android environment?\\nLike this:\\n![Cover](./action-process-text-flutter-cover.png)\\n\\n\x3c!--truncate--\x3e\\n\\nIf yes, then you got yourself to the right place. In this article, I\'m going to talk about how this can be implemented in flutter with the help of a pub plugin [`action_process_text`](https://pub.dev/packages/action_process_text), I wrote.\\n\\nLet\'s get started.\\nFirst, let\'s create our flutter project.\\n\\n`flutter create action_process_text_example`\\n\\nNow, in the `pubspec.yaml` file, add the package\\n\\n```\\ndependencies:\\n  action_process_text: <latest version>\\n```\\n\\nRun pub get and get packages.\\n\\nNow add the following code to `AndroidManifest.xml` file in the `android\\\\app\\\\src\\\\main` folder just after the main activity.\\n\\n```xml\\n<activity android:name=\\"com.example.action_process_text.ActionProcessTextPlugin\\"\\n          android:label=\\"Action_Text\\"\\n          android:theme=\\"@style/LaunchTheme\\">\\n         <intent-filter>\\n             <action\\n               android:name=\\"android.intent.action.PROCESS_TEXT\\" />\\n               <data android:mimeType=\\"text/plain\\"/>\\n               <category\\n               android:name=\\"android.intent.category.DEFAULT\\" />\\n         </intent-filter>\\n</activity>\\n```\\n\\nThe `android:label` here is the String that will be displayed on selecting the text. So, change that to something relevant to what your app does.\\n\\nNow that we have completed all the setup, let\'s take a look at the usage.\\n\\n1. Import the package.\\n\\n`import \'package:action_process_text/action_process_text.dart\';`\\n\\n2. Write an async function for starting up the plugin in the Constructor of the `StatefulWidget`, which will assign the selected text to a variable with the help of await.\\n\\n> This package currently works only in a `StatefulWidget` as `setState()` has to be called.\\n\\n```dart\\nclass SelectedTextViewPage extends StatefulWidget {\\n  @override\\n  _SelectedTextViewPageState createState() => _SelectedTextViewPageState();\\n}\\n\\nclass _SelectedTextViewPageState extends State<SelectedTextViewPage> {\\n  _SelectedTextViewPageState() {\\n    initActionProcessText();\\n  }\\n\\n  Future<void> initActionProcessText() async {\\n    inputText = await ActionProcessText.getInputText;\\n    setState(() {});\\n  }\\n\\n  String inputText = \'\';\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      body: Center(\\n        child: Text(\'Selected Text: $inputText\', ),\\n         ),\\n    );\\n  }\\n}\\n```\\n\\nThe `ActionProcessText.getInputText` is used to get the selected text when the action is performed, otherwise return a blank space `\\"\\"` . It returns a future, so await should be used in a variable declaration.\\n\\nThen, `setState()` is performed to rebuild the page, as it would have already started building, without waiting for the `inputText` to get the future.\\n\\nThe `inputText` can also be re-used for other purposes when the action is not performed, and `InputTextController` can also be used instead.\\n\\nThis is how it should look like,\\n\\n![Demo](./action-process-text-flutter-demo.gif)\\n\\nYou can find this example project on my repository in GitHub: [action_process_text_example](https://github.com/coder-with-a-bushido/action_process_text_example).\\n\\nDrop a like on the package in pub.dev: [action_process_text](https://pub.dev/packages/action_process_text) with the source code available on [GitHub](https://github.com/coder-with-a-bushido/ACTION_PROCESS_TEXT-Flutter).\\n\\nFeel free to report issues/bugs and help me in making the package more awesome.\\n\\n**HAPPY CODING!**"}]}')}}]);